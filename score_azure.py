# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GjVKthG8QKmfc84J-jM242wwcTa7Xv5S
"""



import os
import json
import numpy as np
import pandas as pd
import joblib
import logging
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import  OneHotEncoder

from sklearn.ensemble import GradientBoostingRegressor
from azureml.core.model import Model


# Initialize the model and preprocessing pipeline once when the Azure Function starts
def init():
    
    global ref_cols, predictor
    model_path = os.path.join(os.getenv("AZUREML_MODEL_DIR"),'model.pkl')
    ref_cols,predictor = joblib.load(model_path)
    
    logging.info("Initialization complete")

# Entry point for the Azure Function
def run(raw_data):
    try:
        logging.info("Request received")
        data = json.loads(raw_data)
        data = pd.DataFrame.from_dict(data)
        
        

        data_enc = pd.get_dummies(data)
        
        deploy_cols = data_enc.columns

        missing_cols = ref_cols.difference(deploy_cols)

        for cols in missing_cols:
            data_enc[cols] = 0

        data_enc = data_enc[ref_cols]# Apply the preprocessing steps to the input data
        

        result = predictor.predict(data_enc)
        logging.info("Prediction completed")
        return result.tolist()
    except Exception as e:
        error = str(e)
        return error